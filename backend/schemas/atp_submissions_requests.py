from pydantic import BaseModel, EmailStr, Field, model_validator
from typing import Annotated, Dict, List, Literal, Optional
from dateutil.parser import parse
from datetime import datetime

"""
Initial Form Data:
{
  formId: "674a1b2c3d4e5f6789012345",
  submittedBy: "technician@upwing.com",
  technicianResponses: {
    "0": "Motor tested and operational",  // From input registration
    "1": "Pass",
    "2": "Approved for operation"
  }
}

API Post Request Body structure:
{
  "formId": "674a1b2c3d4e5f6789012345",
  "submittedBy": "technician@upwing.com",
  "submittedAt": "2024-01-15T10:30:00Z",
  "technicianResponses": 
    [
        {questionUUID: "123e4567-e89b-12d3-a456-426614174000", answerFormat: "text", response: "Motor tested and operational"},
    ],
  "status": "submitted"
}
"""

def is_numeric(value):
    if isinstance(value, (int, float)):
        return True
    if isinstance(value, str):
        try:
            float(value)
            return True
        except ValueError:
            return False
    return False

def is_date(value):
    try:
        parse(value)
        return True
    except ValueError:
        return False

class Responses(BaseModel):
    questionUUID: Annotated[str, Field(min_length = 1, example = "123e4567-e89b-12d3-a456-426614174000")]
    spreadsheetCell: Annotated[str, Field(pattern=r'^[A-Z]{1,3}[1-9]\d{0,6}$', description="Cell reference in format A1, B5, AA10, etc.", example = "A1")]
    answer: Annotated[str, Field(min_length = 1, example = "1.0652")]
    answerFormat: Annotated[str, Field(min_length = 1, example = "number")]
    lastEdited: Annotated[str, Field(min_length = 1, example = "2024-01-15T10:30:00Z")]
    
    @model_validator(mode = 'before')
    def validate_last_edited_time(self) -> 'Responses':
        last_edited_time = self.get('lastEdited')
        if last_edited_time is None:
            raise ValueError('lastEdited field is required')
        try:
            #JS datetime includes +00:00 at the end of the iso format string while python datetime doesn't -> need to remove it
            if last_edited_time.endswith('Z'):
                last_edited_time = last_edited_time.replace('Z', '+00:00')
            elif last_edited_time.endswith('+00:00'):
                pass  # Already in correct format
            dt = datetime.fromisoformat(last_edited_time)
            # Remove timezone indicator from output
            self['lastEdited'] = dt.isoformat().replace('+00:00', '')
        except ValueError:
            raise ValueError(f'Invalid format for last edited time, it must be in ISO format: {last_edited_time}')
        return self
        
    
    @model_validator(mode = 'after')
    def validate_fields(self) -> 'Responses':
        if self.answerFormat not in ['text', 'textarea', 'number', 'date']:
            raise ValueError(f"Invalid answer format: {self.answerFormat}")
        if self.answerFormat == 'number' and not is_numeric(self.answer):
            raise ValueError(f"Answer must be a number: {self.answer}")
        if self.answerFormat == 'date' and not is_date(self.answer):
            raise ValueError(f"Answer must be a date string: {self.answer}")
        return self

class ATPTechnicianSubmission(BaseModel):
    formId: Annotated[str, Field(min_length = 1, example = "674a1b2c3d4e5f6789012345")]
    formGroupId: Annotated[str, Field(min_length = 1, example = "454afdslighjdfihg9012345")]
    technicianStartTime: Annotated[str, Field(min_length = 1, example = "2024-01-15T10:30:00Z")]
    submittedBy: Annotated[EmailStr, Field(min_length = 1, example = "technician@upwing.com")]
    technicianResponses: Annotated[List[Responses], Field(min_items = 1, example = [{"questionUUID": "123e4567-e89b-12d3-a456-426614174000", "spreadsheetCell": "A1", "answer": "1.0652", "answerFormat": "number"}])]
    #submittedAt is generated by the backend
    
    
    @model_validator(mode = 'before')
    def validate_technician_start_time(self) -> 'ATPTechnicianSubmission':
        technician_start_time = self.get('technicianStartTime')
        if technician_start_time is None:
            raise ValueError('technicianStartTime field is required')
        try:
            # Handle both Z and +00:00 formats
            if technician_start_time.endswith('Z'):
                technician_start_time = technician_start_time.replace('Z', '+00:00')
            elif technician_start_time.endswith('+00:00'):
                pass  # Already in correct format
            dt = datetime.fromisoformat(technician_start_time)
            # Remove timezone indicator from output
            self['technicianStartTime'] = dt.isoformat().replace('+00:00', '')
        except ValueError:
            raise ValueError(f'Invalid format for technician start time, it must be in ISO format: {technician_start_time}')
        return self
        
    
    @model_validator(mode='after')
    def validate_all_questions_answered(self) -> 'ATPTechnicianSubmission':
        #TODO: Fetch the form template from the database and check if all questions have been answered because the user can submit empty fields and they will be excluded from the form data object
        return self
    

class ATPReviewSubmission(BaseModel):
    formId: Annotated[str, Field(min_length = 1, example = "674a1b2c3d4e5f6789012345")]
    formGroupId: Annotated[str, Field(min_length = 1, example = "454afdslighjdfihg9012345")]
    engineerStartTime: Annotated[str, Field(min_length = 1, example = "2024-01-15T10:30:00Z")]
    reviewedBy: Annotated[EmailStr, Field(min_length = 1, example = "engineer@upwing.com")]
    submissionId: Annotated[str, Field(min_length = 1, example = "674a1b2c3d4e5f6789012345")]
    technicianResponses: Annotated[List[Responses], Field(min_items = 1, example = [{"questionUUID": "123e4567-e89b-12d3-a456-426614174000", "spreadsheetCell": "A1", "answer": "1.0652", "answerFormat": "number"}])]
    engineerResponses: Annotated[List[Responses], Field(min_items = 1, example = [{"questionUUID": "54321e4567-d43b-14e3-b743-346432704654", "spreadsheetCell": "C10", "answer": "Sample answer", "answerFormat": "textarea"}])] 
    submittedBy: Annotated[EmailStr, Field(min_length = 1, example = "technician@upwing.com")]
    submittedAt: Annotated[str, Field(min_length = 1, example = "2024-01-15T10:30:00Z")]
    status: Annotated[Literal['approved', 'rejected'], Field(min_length = 1, example = "approved")]
    #reviewedAt is generated by the backend
    
    
    @model_validator(mode = 'before')
    def validate_engineer_start_time(self) -> 'ATPReviewSubmission':
        engineer_start_time = self.get('engineerStartTime')
        if engineer_start_time is None:
            raise ValueError('engineerStartTime field is required')
        try:
            #JS datetime includes +00:00 at the end of the iso format string while python datetime doesn't -> need to remove it
            if engineer_start_time.endswith('Z'):
                engineer_start_time = engineer_start_time.replace('Z', '+00:00')
            elif engineer_start_time.endswith('+00:00'):
                pass  # Already in correct format
            dt = datetime.fromisoformat(engineer_start_time)
            # Remove timezone indicator from output
            self['engineerStartTime'] = dt.isoformat().replace('+00:00', '')
        except ValueError:
            raise ValueError(f'Invalid format for engineer start time, it must be in ISO format: {engineer_start_time}')
        return self
    
    
    @model_validator(mode='after')
    def validate_all_questions_answered(self) -> 'ATPReviewSubmission':
        #TODO: Fetch the form template from the database and check if all questions have been answered because the user can submit empty fields and they will be excluded from the form data object
        return self
    
    


